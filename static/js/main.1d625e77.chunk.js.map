{"version":3,"sources":["card.js","serviceWorker.js","HourlyCard.js","index.js","img/lightning-bw.svg","img/lightning.svg","img/sun-bw.svg","img/sun.svg","img/cloudy-bw.svg","img/cloudy.svg","img/snow.svg","img/snow-bw.svg","img/rain.svg","img/rain-bw.svg","img/thermometer-bw.svg","img/thermometer.svg","img/wind-bw.svg","img/wind.svg","img/pressure-bw.svg","img/pressure.svg"],"names":["Card","props","state","hovered","image_types","bw_icon","snow_bw_icon","icon","snow_icon","cloudy_bw_icon","cloudy_icon","rain_bw_icon","rain_icon","sun_bw_icon","sun_icon","lightning_bw_icon","lightning_icon","day","this","weather","undefined","className","onMouseEnter","setState","onMouseLeave","src","low_temperature","high_temperature","React","Component","Boolean","window","location","hostname","match","HourlyCard","change_style","name","selected_card","temp","data","dt","Temperature","Pressure","Wind","fetch","then","res","json","console","log","i","list","length","date","Date","toString","slice","id","push","Math","round","thermometer_icon","icon_bw","thermometer_bw_icon","onclick","bind","is_selected","pressure_icon","pressure_bw_icon","wind_icon","wind_bw_icon","HvrButton","defstyle","onClick","Graph","bdata","reverse","adata","value","d","xScale","scaleTime","domain","min","map","max","yScale","scaleLinear","x","y","range","height","width","fill","rx","Group","top","transform","LinePath","stroke","strokeWidth","strokeDasharray","curve","curveBasis","curveMonotoneX","AxisBottom","scale","numTicks","AxisLeft","cx","cy","key","GlyphDot","r","Cards","days","ndays","item","low","high","j","week","to","event","href","App","path","children","SwitchRouter","useParams","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.1d625e77.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './card.css';\nimport lightning_bw_icon from './img/lightning-bw.svg';\nimport lightning_icon from './img/lightning.svg';\nimport sun_bw_icon from './img/sun-bw.svg';\nimport sun_icon from './img/sun.svg';\nimport cloudy_bw_icon from './img/cloudy-bw.svg';\nimport cloudy_icon from './img/cloudy.svg';\nimport snow_icon from './img/snow.svg';\nimport snow_bw_icon from './img/snow-bw.svg';\nimport rain_icon from './img/rain.svg';\nimport rain_bw_icon from './img/rain-bw.svg';\n\n\nclass Card extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {hovered:false}\n        this.image_types = {'Snow':{bw_icon:snow_bw_icon, icon:snow_icon},\n                            'Clouds':{bw_icon:cloudy_bw_icon,icon:cloudy_icon},\n                            'Rain': {bw_icon: rain_bw_icon, icon:rain_icon},\n                            'Sunny':{bw_icon:sun_bw_icon,icon:sun_icon},\n                            'lightning':{bw_icon:lightning_bw_icon,icon:lightning_icon}}; \n    }\n\n\n    render(){\n        let day = this.image_types[this.props.weather];\n        if(day == undefined){\n            day = this.image_types['Sunny'];\n        }\n        return (\n            <div className={this.state.hovered?\"weather-card hovered-card\":\"weather-card\"}\n                    onMouseEnter={()=>{this.setState({hovered:true})}}\n                    onMouseLeave={()=>{this.setState({hovered:false})}}>\n                <p className=\"day-name\">{this.props.day}</p>\n                <img className=\"day-img\"\n                        src={this.state.hovered?day.icon:day.bw_icon}>{}</img>\n                <p className=\"temperature\">{this.props.low_temperature}° {this.props.high_temperature}°</p>\n            </div>\n        );\n    }\n} \n\n\nexport default Card;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './HourlyCard.css';\nimport { Group } from '@vx/group';\nimport { GlyphDot } from '@vx/glyph';\nimport { LinePath } from '@vx/shape';\nimport { scaleTime, scaleLinear } from '@vx/scale';\nimport { curveMonotoneX, curveBasis } from '@vx/curve';\nimport { AxisLeft, AxisBottom } from '@vx/axis';\n\nimport thermometer_bw_icon from './img/thermometer-bw.svg';\nimport thermometer_icon from './img/thermometer.svg';\nimport wind_bw_icon from './img/wind-bw.svg';\nimport wind_icon from './img/wind.svg';\nimport pressure_bw_icon from './img/pressure-bw.svg';\nimport pressure_icon from './img/pressure.svg';\n\n\nconst city_link = \"http://api.openweathermap.org/data/2.5/forecast?id=465543&APPID=04d61ef19932cd9a18fc9ae6e026f150\";\n\nclass HourlyCard extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {temp: [], dt: [], selected_card: 'Temperature'};\n        this.data = {Temperature: [], Pressure: [], Wind: []};\n        fetch(city_link)\n            .then(res => res.json())\n            .then(res => {\n                console.log(res);\n                let dt = [];\n                for(let i=0; i<res.list.length; i++){\n                    let date = new Date(res.list[i]['dt']*1000);\n                    if(date.toString().slice(0, 3) == this.props.id){\n                        this.data[\"Temperature\"].push(Math.round(res.list[i]['main']['temp'] - 273.15));\n                        this.data[\"Pressure\"].push(Math.round(res.list[i]['main']['pressure']));\n                        this.data['Wind'].push(Math.round(res.list[i]['wind']['speed']));\n                        dt.push(date);\n                    }\n                }\n                this.setState({temp: this.data[\"Temperature\"], dt: dt});\n            });\n    }\n    change_style = (name) => {\n        this.setState({selected_card: name});\n        this.setState({temp: this.data[name]});\n    };\n\n    render(){\n        return(\n            <div className=\"hourly-card\">\n                <div className=\"btns\">\n                    <HvrButton icon={thermometer_icon} icon_bw={thermometer_bw_icon} name=\"Temperature\" onclick={this.change_style.bind(this, 'Temperature')} \n                        is_selected={this.state.selected_card}></HvrButton>\n                    <HvrButton icon={pressure_icon} icon_bw={pressure_bw_icon} name=\"Pressure\" onclick={this.change_style.bind(this, 'Pressure')} \n                        is_selected={this.state.selected_card}></HvrButton>\n                    <HvrButton icon={wind_icon} icon_bw={wind_bw_icon} name=\"Wind\" onclick={this.change_style.bind(this, 'Wind')} \n                        is_selected={this.state.selected_card}>></HvrButton>\n                </div>\n                <Graph dt={this.state.dt} temp={this.state.temp}></Graph> \n            </div>\n        );\n    }\n}\n\nclass HvrButton extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {hovered: false};\n    }\n\n    render(){\n        let defstyle = \"hour-btn\";\n        if(this.props.is_selected== this.props.name){\n            defstyle += ' selected-card';\n        }\n        return(\n            <div onMouseEnter={()=>this.setState({hovered:true})}\n                                onMouseLeave={()=>this.setState({hovered: false})}\n                                className={this.state.hovered? defstyle+\" hovered-card\":defstyle}\n                                onClick={this.props.onclick}>\n                <img src={this.state.hovered?this.props.icon:this.props.icon_bw} className=\"hour-img\"></img>\n                <p className='hour-text'>{this.props.name}</p>\n            </div>\n\n        );\n    }\n}\n\nclass Graph extends React.Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        const bdata = this.props.dt.reverse();\n        const adata = this.props.temp.reverse();\n        let data = [];\n        for (let i =0; i<adata.length; i++){\n            data.push({date: bdata[i], value: adata[i]});\n        }\n\n        // accessors\n        const date = d => d.date;\n        const value = d => d.value;\n\n        // scales\n        const xScale = scaleTime({\n        domain: [Math.min(...data.map(date)), Math.max(...data.map(date))]\n        });\n        const yScale = scaleLinear({\n        domain: [Math.min(...data.map(value)), Math.max(...data.map(value))]\n        });\n\n        // positions\n        const x = d => xScale(date(d));\n        const y = d => yScale(value(d));\n\n        // colors\n        const primary = '#8921e0';\n        const secondary = '#00f2ff';\n        const contrast = '#ffffff';\n        let width = 612;\n        let height = 512; \n        let margin = 20;\n        const xMax = height-margin*2;\n        const yMax = xMax;\n\n        // update scale range to match bounds\n        xScale.range([20, xMax]);\n        yScale.range([yMax, 20]);\n\n        return(\n        <div className=\"graph-area\">\n            <svg width={width} height={height}>\n                <rect x={0} y={0} width={width} height={height} fill={secondary} rx={14} />\n                <Group top={margin.top} transform=\"translate(60, 0)\">\n                    <LinePath\n                    data={data}\n                    x={x}\n                    y={y}\n                    stroke={primary}\n                    strokeWidth={2}\n                    strokeDasharray=\"2,2\"\n                    curve={curveBasis}\n                    />\n                    <LinePath\n                    data={data}\n                    x={x}\n                    y={y}\n                    stroke={primary}\n                    strokeWidth={3}\n                    curve={curveMonotoneX}\n                    />\n                    <AxisBottom top={yMax} scale={xScale} numTicks={width > 520 ? 10 : 5} />\n                    <AxisLeft scale={yScale} />\n                    {data.map((d, i) => {\n                    const cx = x(d);\n                    const cy = y(d);\n                    return (\n                        <g key={`line-point-${i}`}>\n                        <GlyphDot cx={cx} cy={cy} r={6} fill={contrast} stroke={secondary} strokeWidth={10} />\n                        <GlyphDot cx={cx} cy={cy} r={6} fill={secondary} stroke={primary} strokeWidth={3} />\n                        <GlyphDot cx={cx} cy={cy} r={4} fill={contrast} />\n                        </g>\n                    );\n                    })}\n                </Group>\n            </svg>\n        </div>\n        );\n    }\n}\n\nexport default HourlyCard;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './card';\nimport * as serviceWorker from './serviceWorker';\nimport {\n    BrowserRouter as Router, \n    Switch,\n    Route, \n    Link, \n    useParams\n} from \"react-router-dom\";\nimport HourlyCard from './HourlyCard';\n\nconst city_link = \"http://api.openweathermap.org/data/2.5/forecast?id=465543&APPID=04d61ef19932cd9a18fc9ae6e026f150\";\n\nclass Cards extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {days : []};    \n        \n        fetch(city_link)\n            .then(res => res.json())\n            .then(res => {\n                console.log(res);\n                let ndays = [];\n                console.log(res);\n                for(let i = 0; i < 5; i++){\n                    let item = res.list[i*8];\n                    let date = new Date(item['dt']*1000);\n                    let low = 1000, high = -1000;\n                    for (let j = 0; j < 8; j++){\n                        low = Math.min(res.list[i*8+j]['main']['temp_min'], low);\n                        high = Math.max(res.list[i*8+j]['main']['temp_max'], high);\n                    }\n                    ndays.push({day: date.toString().slice(0, 3), weather: item['weather'][0]['main'], \n                        low_temperature: Math.round(low-273.15), \n                        high_temperature: Math.round(high-273.15)});\n                }\n\n                this.setState({days: ndays});\n                });\n    }\n\n    render(){\n        \n         this.week = this.state.days.map((d) =>\n            <Link to={'/'+d.day} className=\"nolink\">\n                <Card day={d.day} weather={d.weather} low_temperature={d.low_temperature} high_temperature={d.high_temperature} key={d.day}\n                    onClick={event => window.location.href=\"/\"+d.day}></Card>\n            </Link>\n        );\n        return(\n            <div className=\"cards\">\n                {this.week} \n            </div>\n        );\n    }\n}\n\nclass App extends React.Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return(\n            <Router>\n                <Switch>\n                    <Route path=\"/:id\" children={<SwitchRouter />}>\n                    </Route>\n                    <Route path=\"\">\n                        <Cards></Cards>\n                    </Route>\n                </Switch>\n            </Router>\n        );\n    }\n}\n\nfunction SwitchRouter(){\n    let {id} = useParams();\n    return(\n        <HourlyCard id={id}></HourlyCard> \n    );\n}\n\nReactDOM.render(<App></App>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/lightning-bw.ccc9175c.svg\";","module.exports = __webpack_public_path__ + \"static/media/lightning.1bb6a389.svg\";","module.exports = __webpack_public_path__ + \"static/media/sun-bw.233d3383.svg\";","module.exports = __webpack_public_path__ + \"static/media/sun.4435487a.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy-bw.beda2efd.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.82c3c473.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.c8ce417c.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow-bw.a5c8c71d.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.7a45e480.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain-bw.d9b219f6.svg\";","module.exports = __webpack_public_path__ + \"static/media/thermometer-bw.0a77b815.svg\";","module.exports = __webpack_public_path__ + \"static/media/thermometer.138a9ff8.svg\";","module.exports = __webpack_public_path__ + \"static/media/wind-bw.ba4c41c6.svg\";","module.exports = __webpack_public_path__ + \"static/media/wind.0950346d.svg\";","module.exports = __webpack_public_path__ + \"static/media/pressure-bw.f731ab6a.svg\";","module.exports = __webpack_public_path__ + \"static/media/pressure.3a8063e8.svg\";"],"sourceRoot":""}